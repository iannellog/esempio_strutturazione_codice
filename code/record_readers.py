#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 29 14:55:43 2022

@author: iannello

acquisizione di record da inserire in un'agenda
aggiunta di un metodo statico nella classe astratta Record_Reader
che funge da factory
"""

from json import load
from PySide6.QtCore import Slot
from PySide6.QtWidgets import QApplication, QDialog

from ui.GetRecord import Ui_GetRecord

from abc import ABC, abstractmethod


class Record_Reader(ABC):
    """
    classe astratta
    """

    @abstractmethod
    def get_record(self):
        """
        acquisisce un record e lo restituisce sotto forma di dizionario
        restituisce un dizionario vuoto per indicare che non vi sono altri
        record da acquisire

        Returns
        -------
        dict
            il record sotto forma di dizionario
            restituisce un dizionario vuoto per indicare che non vi sono altri
            record da acquisire
        """

        pass

    @staticmethod
    def create_instance(**kwargs):
        """
        crea un istanza di una sottoclasse concreta

        Parameters
        ----------
        **kwargs : dict
            parametri opzionali per controllare quale sottoclasse
            creare

        Raises
        ------
        ValueError
            genera un'eccezione se non viene indicato quale sottoclasse
            creare o se viene indicata una sottoclasse inesistente

        Returns
        -------
        Record_Reader
            un'istanza della sottoclasse richiesta

        """

        if 'source_type' not in kwargs.keys():
            raise ValueError('missing type of record reader')
        if kwargs['source_type'] == 'stdin':
            return Record_Stdin_Reader()
        elif kwargs['source_type'] == 'Qt dialog':
            return Record_Qt_Dialog_Reader()
        elif kwargs['source_type'] == 'json file':
            return Record_JSONfile_Reader(kwargs['fname'])
        else:
            raise ValueError(f'unknown source type {kwargs["source_type"]}')


class Record_Stdin_Reader(Record_Reader):
    """
    reader of records from standard input
    """

    def __init__(self):
        pass

    def get_record(self):
        """
        implementazione del metodo astratto
        """

        nome = input('Nome: ')
        if nome == 'stop':
            return {}
        record = {}
        record['nome'] = nome
        record['cognome'] = input('Cognome: ')
        record['telefono'] = input('Telefono: ')
        record['email'] = input('Email: ')
        return record


class Record_JSONfile_Reader(Record_Reader):
    """
    reader of records from standard input
    """

    def __init__(self, fname):
        self.fin = open(fname)
        self.data = load(self.fin)
        self.fin.close()
        self.next_record = 0

    def get_record(self):
        """
        implementazione del metodo astratto
        """

        if self.next_record < len(self.data):  # there is another record
            self.next_record += 1
            return self.data[self.next_record - 1]
        else:
            return {}


class Record_Dialog(QDialog, Ui_GetRecord):
    def __init__(self, parent=None):
        super(Record_Dialog, self).__init__(parent)  # initialize base classes attributes if any
        self.setupUi(self)  # setup the actual GUI generated by Qt Designer

        # adding action method to the push button
        self.ok_cancel.accepted.connect(self.accepted_values)
        self.ok_cancel.rejected.connect(self.canceled_values)

        self.dataNome = ''
        self.dataCognome = ''
        self.dataTelefono = ''
        self.dataEmail = ''

    @Slot()
    def accepted_values(self):
        self.dataNome = self.nome.text()
        self.dataCognome = self.cognome.text()
        self.dataTelefono = self.telefono.text()
        self.dataEmail = self.email.text()

    @Slot()
    def canceled_values(self):
        self.dataNome = 'stop'

    def get_record(self):
        return self.dataNome, \
               self.dataCognome, \
               self.dataTelefono, \
               self.dataEmail


class Record_Qt_Dialog_Reader(Record_Reader):
    """
    reader of records from Qt dialog
    """

    def __init__(self):
        pass

    def get_record(self):
        """
        implementazione del metodo astratto
        """

        app = QApplication([])
        dialog = Record_Dialog()
        dialog.show()
        app.exec_()
        if dialog.dataNome == 'stop':
            return {}
        record = {}
        nome, cognome, telefono, email = dialog.get_record()
        record['nome'] = nome
        record['cognome'] = cognome
        record['telefono'] = telefono
        record['email'] = email
        app.shutdown()
        return record
